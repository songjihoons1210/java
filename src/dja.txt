    [ 디자인 패턴 ]
        1. 패턴 이란 : 되풀이되는
        2. 디자인 패턴 : 소프트웨어 설계 과정에서 자주 발생하는 문제점/설계 유형
        3. 종류
            1) 싱글톤 패턴
            2) MVC 패턴
        4. 목적 : 여러 개발자들이 협업간 관례적인 규칙(패턴)으로 개발의 효율성 높인다.
    [ 싱글톤 ]
        1. 정의 : 프로그램내 객체(인스턴스)가 단 하나만 존재하는 설계
        2. 목적 : 하나의 객체(인스턴스)를 만들고 공유
            - 여러개의 객체가 존재하면 서로 다른 메모리를 사용하므로 공유하는데 제약이 있다.
            - 협업에 있어서 굳이 여러개 객체(인스턴스)가 필요 없는 경우가 있다.
        3. 싱글론 만드는 방법
            단계1) 지정한 클래스에 기본 생성자를 PRIVATE 한다.
                PRIVATE 생성자명(){ }
            단계2) 지정한 클래스에 private static final 으로 객체(인스턴스) 선언한다.
                private static final 클래스명 변수명 = new 생성자명

        6. 사용처 : 다양한 실무 프레임워크(Spring) 에서 권장하는 패턴이다.
        7. 레이어/계층
            V(view)     : 입출력 담당
                1) 주로 웹/앱  에서는 html/css/js/jsp/react/플러터(프론트엔드)
                2) 사용자로부터 입력과 출력 받는다.
                3) 관례적인 규칙 ( console ) view클래스에서만 print함수와 scan함수를 사용한다.
              C(controller) :model 과 view 사이의 제어/전달/유효성검사 담당
                1) 주로 웹/앱 에서는 JAVA/PYTHON/NODE.JS (백엔드)
                2) 사용자로부터(VIEW) 부터 요청을 받아 MODEL 에게 전달하고 처리 결과를 VIEW 에게 전달한다.
                3) 주요 키워드
                    MVC1 패턴                     : JSP (controller+view) ,model
                    MVC2 패턴                     : controller , view , model     [V]
                    MVC2 패턴 3티어(Spring)        : controller , service , view , model
              M(model)    :  데이터 관리 담당
                1) 주로 웹/앱 에서는 JAVA/PYTHON/NODE.JS (백엔드)
                2) 데이터베이스 상효작용
                3) 주요 키워드
                    DAO( data access object : 데이터 접근 객체 : ex] 물류 센터
                    DTO( data transfer object ) : 데이터를 이동 객체 : ex] 택배 기사
                4) 관례적인 규칙
                    DTO 에는 데이터모델 이므로 싱글톤을 사용하지 않는다.
        8. 레이어/계층 간의 흐름도
            [주문]
                주문 요청 : 콜라 하나 주세요.
                    VIEW ---DTO---> controller ---DTO---> model(DAO)
                주문 응답 : 콜라 하나 줄게요.
                 VIEW <--- DTO --- controller <------- model(DAO)
        9. 파일/폴더 MVC 기준 구분
            - 프로젝트 폴더
                - controller 폴더
                    MemberController
                    BoardController
                - model 폴더
                    - DAO 폴더
                        MemberDao
                        BoardDao
                    - DTO 폴더
                    MemberDto
                    BoardDto
                - view 폴더 * 추후에 HTML 로 변경 된다.
                    MemberView
                    BoardView
                - AppStart 클래스
