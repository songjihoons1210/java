package day13;

public class Exaple1 {
    public static void main(String[] args) {
        /*
            클래스 멤버 : 1.멤버변수 2.메소드 3.생성자
            [ 상속 ]
                1. 정의 : (상위)클래스 로부터 (하위)클래스 에게 (메멉변수/메소드) 돌려주는 행위
                2. 목적 : 빠른개발 , 한번 만들어둔 클래스를 재 사용/활용 한다.
                3. 키워드 : extends( 확장/연장 )
                4. 장점 : 1.유지보수 2.계층표현 3.재사용 4.**다형성**
                5. 사용법 : class 하위클래스명 extends 상위클래스명 { }
                6. 주의할점 : 1) 상위클래스는 1개만 존재할수 있다.
                            2) 현실과 다르게(부모가 자식 상속) 아니고
                               (자식이 부모를 선택) 하위가 상위를 선택

         7. 예]
            동물              : 하위 : 조류
            |
            |
            조류               : 상위 : 동물 , 하위 : 참새/닭
            |
            ----------------
            |              |
            참새            닭  : (참새) 상위:조류  (닭) 상위:조류

            다형성 : 다양한 형식/타입 를 갖는 성질
             1) 자동(목시적)타입변환
                (1) 기본타입(0가지)
                    byte -> short -> int -> long -> float -> double
                (2) 창조타입
                    하위 클래스(타입) 에서 상위 클래스(타입)으로 변환
                    가능 조건 ] extends상하/부모/계층 관계일때만 가능하다.

             3) 강제(멸시적)타입변환
                (1) 기본타입 (0가지)
                    double -> float -> long -> int -> short -> byte
                    (변환할타입)값
                (2) 창조타입
                   상위 클래스(타입) 에서 하위 클래스(타입)으로 변환
                   가능 조건 ] 객체(값)의 최초 타입에 따라 다르다.

          *** 컴퓨터가 이해하는 다형성이란? ***
            (닭)객체 생성되면 [눈에 안보임] 조류 객체 생성 --> 동물 객체 생성
            1. 닭 객체 생성시 총 3개(닭/조류/동물) 의 객체 생성
            2. 조류 객체 생성시 총2개(조류/동물) 의 ㄱ개체 생성
            3. 참새 객체 생성시 총3개(참새/조류/동물) 의 객체 생성
                즉] 참새는 절때 닭이 될수 없다. 객체가 없으므로.
                즉2] 참새는 동물 -- > 조류 --> 참새 : 왔다갔다 변환 되는 기능. 객체가 있으므로.


         */
        //[1] 동물 클래스 로 객체1개
        동물 animal = new 동물();
        animal.name = "강아지";
        animal.show();

        // [2]  조류 클래스 로 객체1개
        조류 bird = new 조류();
        // --> extends 란? 상위클래스의 멤버변수/메소드 하위클래스가 사용가능
        bird.name ="비둘기"; // 조류 클래스존재하지 않는 멤버변수
        bird.show();    // 조류 클래스 존재하지 않는 메소드

        // [3] 참새
        참새 참참 = new 참새();
        참참.name = "참새1";
        참참.show();

        // [4] 닭 클래스 로 객체1개 , 닭의 부모 --> 조류 --> 동물
        닭 chicken = new 닭();
        chicken.name = "닭1";
        chicken.show(); //닭1

        // [5. 다형성]
        // (1) 전체(객체)의 법칙/클래스가 조류로 변경
        조류 bird2 = 참참;
            // int a = 3 ; long b = a;
        // (2) 참새(객체)의 클래스를 동물 로 변경
        동물 animal2 = 참참;
            // byte a= 3; long b = a;

        // (3) 동물(객체)의 클래스를 참새로 변경
            // --> 부모는 자식을 모른다.
            // 왜? 자식이 부모를 선택하는 구조
        // 참새 참참2 = animal; // 오류 발생
        // 조류 bird3 = animal; // 오류 발생

        // (4) 단] 상위타입에서 하위타입으로 변경 조건
            // --> 객체(값) 태생(최초) 타입
        // (4-1) 닭 태어난 객체는 닭-> 동물 -> 닭
        닭 obj1 = new 닭(); // 태생이 닭 인 객체는
        동물 obj2 = obj1; // 상위 클래스 변환 : 자동 타입변환
        닭 obj3 = (닭)obj2; // 하위클래스로 반환 : 강제 타입변환

        // (5) 형재들 간의 타입 절때 불가능.
        // 참새 obj4 = (참새)obj3; // 오류 발생
    }
}

// [1] 동물 클래스
class 동물 {
    String name; // 멤버변수

    void show() { // 메소드
        System.out.println("이름 : " + this.name);
    }
}

// (2) 조류 클래스 : *동물* 클래스로부터 상속받기
class 조류 extends 동물{ }
// (3) 참새 클래스 : **조류** 클래스로부터 상속받기
class 참새 extends 조류 { }
// (4) 닭 클래스  : **조류** 클래스로부터 상속받기
class 닭 extends 조류 { }